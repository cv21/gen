package pkg

import (
	"fmt"
	"strings"

	"github.com/dave/jennifer/jen"
	"github.com/vetcher/go-astra/types"
)

// FindInterface is a function which returns an interface struct from given file by given name.
// Result of functions is nil if interface with given name is not found in given file structure.
func FindInterface(f *types.File, name string) *types.Interface {
	for _, iface := range f.Interfaces {
		if iface.Name == name {
			return &iface
		}
	}

	return nil
}

// Constructs jennifer statement for given astra type.
// It is widely useful when you need to make a type statement for imported type.
func TypeQual(t types.Type) *jen.Statement {
	ti := types.TypeImport(t)
	tn := types.TypeName(t)

	if ti != nil && tn != nil {
		res := *tn
		switch v := t.(type) {
		case types.TPointer:
			ptrOp := strings.Repeat("*", v.NumberOfPointers)
			return jen.Op(ptrOp).Qual(ti.Package, res)
		}
		return jen.Qual(ti.Package, res)
	}

	return jen.Id(t.String())
}

// Adds default autogenerated package comment for a file.
func AddDefaultPackageComment(f *jen.File, generatorName string) *jen.File {
	f.PackageComment(fmt.Sprintf("File generated by gen (%s). DO NOT EDIT.", generatorName))
	return f
}
